CubeDude_KickAbout:

Github:
https://github.com/PaulSolheim/CubeDude_Kickabout

Last ned ZIP-fil
Unzip
Godot
Scann
Velg mappe
Rediger

3D scene navigering
Høyre musknapp nede (look around)
Mushjulet (Zoom inn/ut)
Høyre musknapp + Key:
A-D Gå til Venstre-Høyre
W-S Gå Fremover-Bakover
Q-E Gå Nedover-Oppover

La oss lage en scene med en bane:
+ knapp, skriv mesh, velg MeshInstance
I Inspektøren, ved Mesh, klikk på <null>,
velg "New PlaneMesh"
Endre navnet på noden til "Pitch"

La oss legge på Materiale:
Klikk på Figuren ved Mesh
ved Material, klikk <null>,
velg "new SpatialMaterial",
klikk på Kula,
Velg "Albedo",
Gå til GFX-mappa, dra tabletop.png til Texture <null>

La oss lagre scenen:
Ctrl-S, "Lag mappe" knappen, "Scenes", OK-knapp, Lagre-knapp

La oss lagre materialet:
Klikk "Diskett-ikonet", velg "Lagre", Gå opp et nivå, velg GFX-mappa,
Skriv "Pitch.material", klikk Lagre-knappen

La oss endre størrelsen på banen:
Velg Pitch-noden i Scene-lista,
klikk på ikonet ved Mesh,
klikk Size og sett x:20 og y:15
Flytt banen litt oppover så vi slipper å se rutemønsteret
Ctrl-S for å lagre

La oss lage en ball,
Utfordring: Lage en ny scene, legg til en ball
og lagre scenen med navnet "Ball" i Scenes-mappa.

Ny scene, + node, "mesh", MeshInstance,
rename til "Ball", Mesh <null>, new SphereMesh,
klikk ikonet, under PrimitiveMesh, Klikk Material <null>,
velg "new SpatialMaterial", klikk på kula,
under Albedo, klikk ikonet ved Color, velg en kul farge,

Klikk "Diskett-ikonet", velg "Lagre", velg GFX-mappa,
Skriv "Ball.material", klikk Lagre-knappen

La oss sette riktig størrelse på ballen:
Sett, Radius: 0,25 og Height:0,5

Ctrl-S for å lagre scenen, velg Scenes-mappa, Lagre-knappen

La oss lage en Game scene:
Ny scene, + node, "spa", velg Spatial, Lag-knapp
rename node til "Game", Ctrl-S, velg Scenes-mappa, Lagre-knapp
La oss lenke inn Pitch-scenen og Ballen:
Lenke-ikonet, velg Pitch-scenen
Klikk Game-noden, Lenke-ikonet, velg Ball-scenen
Flytt Ballen litt opp i lufta over banen.
La oss legge til et kamera:
Velg Game-noden,
+ node, skriv "camera", velg "Camera",
Flytt kameraet så det ser greit ut (Forhåndsvis)

Trykk "Play" knappen, velg Game-scenen som Hovedscene.

Hva! Ballen svever i lufta!

Mesh i Godot er ikke et fysisk objekt, kun geometri
For å bruke kollisjoner og fysikk må vi bruke Physicsbody
Godot har 4 forskjellige typer:
	StaticBody - Fast objekt som ikke flytter seg
	RigidBody  - Objekt som reagerer på fysikk
	KinematicBody - Objekt som kan bevege seg selv
	VehicleBody - For biler, tog, fly o.l.

Så vi må ha en av disse som Rot-node i Pitch og Ball scenene
Den greiste måten å gjøre det på er å lage en mesh som under-node og kopiere verdiene
før vi gjør om rot-noden til riktig type:
Åpne Pitch-scenen, + node, skriv "mesh", velg "MeshInstance"
Velg Pitch-noden, klikk "Skrutrekker og skiftenøkkel", velg "kopier parametre",
velg MeshInstance-noden, klikk "Skrutrekker og skiftenøkkel", velg "lim inn parametre",
Velg Pitch-noden, høyre-klikk, velg "Change type", skriv "static", velg "StaticBody"
Vi må også legge på en kollisjons-sone,
Velg Pitch-noden, + node, skriv "colli", velg CollisionShape, Lag knapp
Klikk <null> ved siden av Shape, velg "new BoxShape"
Klikk BoxShape, sett Extents til:
x:10, Y: 0.1, z:7.5

Velg Pitch noden, den har nå fysikkegenskaper
som Friction og Bounce (sprettbarhet)
sjekk at banen ikke svever over kollisjons-sonen
klikk Translation og sett y:0
Velg MeshInstance noden,
klikk Translation og sett y:0.05
Ctrl-S for å lagre Pitch scenen

La oss gjøre det samme for Ball-scenen,
men med RigidBody og SphereCollider:
Åpne Ball-scenen, + node, skriv "mesh", velg "MeshInstance"
Velg Ball-noden, klikk "Skrutrekker og skiftenøkkel", velg "kopier parametre",
velg MeshInstance-noden, klikk "Skrutrekker og skiftenøkkel", velg "lim inn parametre",
Velg Ball-noden, høyre-klikk, velg "Change type", skriv "rigid", velg "RigidBody"
Vi må også legge på en kollisjons-sone,
Velg Ball-noden, + node, skriv "colli", velg CollisionShape, Lag knapp
Klikk <null> ved siden av Shape, velg "new SphereShape"
klikk på <SphereShape> og sett radius: 0.25
Ctrl-S for å lagre Ball scenen.

HIT - 1.Gang

Klikk Play-knappen og sjekk om ballen ramler ned på banen.

La oss sette opp Kollisjons-lag:
I menyen, velg Prosjekt - Prosjektinnstillinger
Gå ned til 3d-physics
Legg til våre egne navn for lagene:
Layer 1			Pitch
Layer 2			Ball
Layer 3			Players

Lukk knappen

Gå til Pitch scenen, velg Pitch noden
Gå til Collision og sett
Layer: Pitch
Mask:  Ball og Players

Gå til Ball scenen, Velg Ball noden
Gå til Collision og sett
Layer: Ball
Mask:  Pitch og Players

Trykk "Play" knappen og sjekk at det fremdeles fungerer.

Next up - Legge inn Cubedude og mål

Velg Models mappa
Velg Cubedude mappa
dobbeltklikk Cubedude.dae
velg "New Inherited" !

Import av Modellen har laget et materiale som er grått
for å sette riktig texture:
dobbeltklikk CubeDude.material filen
Gå til Albedo
Dra filen "11 CubeDude.png" til Texture <null>

Klikk Metallic:
Sett Metallic og Specular til 0
Klikk Roughness:
Sett Roughness til 1
(forberedelser siden vi skal bruke noe som heter toonshading)

Klikk på diskett-ikonet for å lagre materialet,
velg lagre,
nå kan du se at filen med materialet er endret 

Ctrl-S for å lagre scenen, velg Scenes-mappa, Lagre knappen

La oss lage et nytt material for den andre spilleren
Høyreklikk Cubedude.material filen, velg Dupliser
Gi den navnet "CubedudeBlue.material"
Dobbeltklikk det nye materialet
Dra filen "11 Cubedude Blue.png" til Texture området
Klikk på diskett-ikonet for å lagre materialet,
Velg lagre,
nå kan du se at filen med materialet er endret

Neste er å legge til Capsule Collider på Cubedude.
Velg Cubedude noden,
+ node, skriv "colli", velg "CollisionShape",
klikk Shape <null>, velg "New CapsuleShape",
klikk Transform,
Sett Translation, y:1
Sett Rotation, x:-90
Juster Capsule colliderens størrelse
så den passer figuren nokså bra.

La oss sett Cubedude på riktige Kollisjonslag:
Velg Cubedude noden,
Under PhysicsBody, Collision sett:
Layer: Players
Mask:  Pitch, Ball og Players

Ctrl-S for å lagre

La oss legge til Cubedude.

Åpne Game scenen
velg Game noden
+ node velg "Node"
Endre navn til "Players"
Lenk inn Cubedude scenen
endre navn til "Player1"

Vi må legge til et skript for Cubedude:

Gå til Cubedude scenen
klikk på skript-ikonet for å legge til et skript
velg Template "No Comments"
klikk på mappa ved Søkesti:
	Gå et nivå oppover ved å klikke "liten pil opp"
	Klikk "Lag mappe"
	skriv "Scripts", klikk OK
	Klikk Lagre-knappen
Klikk Lag knappen
Nå har vi fått et nytt skript med bare en tom _ready() funksjon
Slett _ready() funksjonen og pass linja.

Skriv skriptet:

var motion = Vector3()

export var speed = 10

const UP = Vector3(0,1,0)

func _physics_process(delta):
	move()

func move():
	if Input.is_action_pressed("ui_up") and not Input.is_action_pressed("ui_down"):
		motion.z = -speed
	elif Input.is_action_pressed("ui_down") and not Input.is_action_pressed("ui_up"):
		motion.z = speed
	else:
		motion.z = 0

	if Input.is_action_pressed("ui_left") and not Input.is_action_pressed("ui_right"):
		motion.x = -speed
	elif Input.is_action_pressed("ui_right") and not Input.is_action_pressed("ui_left"):
		motion.x = speed
	else:
		motion.x = 0
	
	move_and_slide(motion, UP)

Test spillet og se om du kan styre "Player1" med piltastene.

HIT - 2.Gang

For å kunne sparke til ballen må vi legge til gravitasjon på spilleren.

Gå til skriptet og legg til:

const GRAVITY = -5

func _physics_process(delta):
	..
	fall()
	
func fall():
	if is_on_floor():
		motion.y = 0
	else:
		motion.y = GRAVITY

La oss fikse så vi kan sparke til ballen:

Gå til Cubedude scenen
La oss unngå at cubedude blir dyttet oppover av ballen.
Klikk på rot-noden (cubedude)
Klikk "Axis lock" i inspektøren:
skru på Linear Y
skru på Angular Y

Vi må også skru på kollisjons-oppdagelse på ballen
Gå til Ball scenen
klikk på rot-noden (Ball)
I inspektøren under RigidBody
Skru av "Can Sleep"
Skru på "Continuous Cd"
(kontinuerlig kollisjons sjekking)

Ctrl-S for å lagre

Test Spillet - Kan du sparke ballen?

La oss legge til mål:

Gå til Models/Goal mappa
Dobbeltklikk "Goal.dae" filen,
velg "New Inherited"
Rename "Scene Root" til "Goal"
Høyreklikk "Goal", klikk "Change Type",
skriv "stat", velg "StaticBody", trykk "forandre" knappen
Ctrl-S for å lagre, velg "scenes" mappa,  trykk lagre knappen

La oss legge til kollisjons-soner for målet og nettet
klikk på Goal mesh'n i hierarkiet
Velg menyvalget:
Mesh - Create Trimesh Collision Sibling
klikk på Net mesh'n i hierarkiet
Velg menyvalget:
Mesh - Create Trimesh Static Body

La oss sette opp kollisjonslagene for
hver av de to Staticbody'ene:
Klikk Goal i hierarkiet,
Klikk Collision i Inspektøren
Sett Mask til Ball og Players (fjern Pitch)

Klikk StaticBody under Net i hierarkiet
Klikk Collision i inspektøren
Sett Mask til Ball og Players (fjern Pitch)
Ctrl-S for å lagre

Åpne Game Scenen (under scenes mappa)
Klikk på toppnoden i hierarkiet

klikk + ikonet, fjern bokstavene i søk-boksen,
velg Node, klikk Lag knappen
Gi noden navnet "Goals" (dobbeltklikk)
Klikk lenke-ikonet, velg Goal-scenen
Gi noden navnet Goal1
Flytt målet til riktig posisjon på banen
Ctrl-D for å lage en kopi
Flytt til riktig sted, endre Y-rotasjon (-90 og 90)
Ctrl-S for å lagre

Test Spillet - Klarer du å score mål?

HIT - 3.Gang

--- Jeg har gjort dette ---
Nettet kommer litt utenfor banen,
La oss lage banen litt større
Åpne Pitch scenen
velg MeshInstance i hierarkiet
klikk "mesh" ikonet
Endre størrelsen til
X:22 Y:16
Vi må også endre kollisjons-sonen
velg CollisionShape i hierarkiet
Klikk "Pitch.tscn" ved Shape
Endre Extents til
X:11 og Z:8
Ctrl-S for å lagre

Gå til Game scenen
Flytt målene så de passer banen

La oss endre fargen på det ene målet til blå
Endre navnet på Goal.material til GoalGreen.material
Høyreklikk, Endre Navn
Høyreklikk, Duplicate
Endre navnet på kopien til GoalBlue.material
DobbeltKlikk på GoalBlue.material
Velg Blå farge under Albedo - Color
+ ikonet for å lagre fargen som preset
Klikk GoalBlue pånytt
Klikk Emission, velg den samme blåfargen (fra preset)
Trykk Lagre-ikonet, velg Lagre

Velg Goal1 i hierarkiet
Høyreklikk, Velg Editable Children
Velg Goal
Dra materialet GoalBlue til <null> ved 0 under Material
Ctrl-S for å lagre

Test Spillet

Utfordring:
Kan du legge til kollisjons-soner
på utsiden av banen?

Min måte:
Gå til Game scenen, velge topp-noden
+ ikon, velg Node, endre navn til "Limits"
+ ikon, skriv mesh, velg MeshInstance
klikk <null> ved Mesh, velg New CubeMesh
Sett, Transform, Translation, Z:-9
Klikk Cube-ikonet ved Mesh, 
Sett Size: X:22, Y:10, Z:2
Klikk MeshInstance,
Endre Transform, Translation Y:5 Z:-9
Endre Navnet på MeshInstance til BackWall
Velg Mesh - Create Convex Static Body
(Så vi får kollisjons-soner)

Ctrl-D for å lage en kopi
Endre Navnet på kopien til FrontWall
Endre Transform - Translation, Z:9

Velg Limits i hierarkiet
+ ikonet, velg MeshInstance
klikk <null> ved Mesh, velg New CubeMesh
Sett, Transform, Translation, X:12 Y:5
Klikk Cube-ikonet ved Mesh, 
Sett Size: X:2, Y:10, Z:16
Rename MeshInstance til RightWall
Velg Mesh - Create Convex Static Body
(Så vi får kollisjons-soner)

Ctrl-D for å lage en kopi
Rename til LeftWall
Endre Transform, Translation: X:-12

Gjør de fire veggene "usynlig" 
ved å klikke på øye ikonet

Test Spillet, stopper ballen riktig?

Det er fremdeles litt kinkig når ballen havner i hjørnet
eller på siden av målet.
La oss gjøre det så ballen bare kan være på banen og i mål.

Marker Alle veggene i hierarkiet
Ctrl-D for å lage kopier
(Kopiene har 2 tilslutt i navnet)

Velg BackWall2 i hierarkiet, 
skru på synlighet (øyet kommer frem)
flytt veggen inn til sidelinjen på banen
Gjør det samme for FrontWall2
Gjør det samme for RigthWall og LeftWall,
men ikke helt til linja så ballen kan gå i mål

Ekspander alle 2-er veggene,
Velg alle Static Body, Ctrl-Klikk
Under Collision,
Fjern alle fra Layer,
Under Mask, Velg kun Ball

Sett alle 2-er veggene til å være usynlige

Test Spillet:
	stopper ballen ved linja?
	er det lettere å komme bak ballen ved linja og i hjørner?

La oss fikse lys-setting så det ser bedre ut!
Dobbeltklikk default_env.tres fila under res://
Denne er satt opp som 
"Default Environment" i Prosjektinnstillinger
Sett
Mode: "CustomColor"
Color: Svart
Energy: 0

Ambient Light:
Color: Litt lys blå-grønn farge
Energy: 1
Sky Contribution: 0

Klikk Lagre-ikonet, velg Lagre

La oss legge inn vår egen lyskilde:
Velg topp-noden i Game scenen
+ ikonet, fjern evt. søketekst,
velg Node, endre navnet til "Lights"
+ ikonet, skriv light
(si litt om de forskjellige lyskildene)
velg Directional Light
Løft lyset opp og til et hjørne
klikk roterings ikonet
klikk T for å komme i "Local space modus"
Dra i rotasjons-hjulene 
så lyset peker inn mot midten av banen

I Inspektøren, Under Light,
Endre Color, prøv med forskjellige farger,
en lysegul farge gir "ettermiddags-lys"

Velg Shadow, Enabled on for å få skygger
Sett fargen på skygger til noe annet enn svart
f.eks. Mørkeblå
Hvis du øker verdien for Contact blir
det litt mørkere skygger nær kontaktflatene

Hvis du vil ha "Toon" shading:
søk i filsystem, skriv material
dobbeltklikk ball.material
under Parameters, Diffuse Mode velg "Toon",
Klikk Lagre.ikonet, velg Lagre
Gjør det samme for de to CubeDude materialene.

START - 4.Gang

La oss legge til animasjon for CubeDude:
Gå til Cubedude scenen
Gå til Skriptet (klikk Script)
Legg til en ny funksjon:

func _process(delta):
	animate()

Legg til en ny funksjon til:

func animate():
	if motion.length() > EPSILON:
		if not $AnimationPlayer.is_playing():
			$AnimationPlayer.play("Arms Cross Walk")
	else:
		$AnimationPlayer.stop()

Gå til toppen av skriptet og definer EPSILON
som en konstant:

const EPSILON = 0.000001

Test Spillet:
	Får du animasjon når han beveger seg?
	Cubedude svever litt over banen:
		Gå til Pitch scenen
		Velg MeshInstance i hierarkiet
		Under Transform - Translation:
			Endre Y til 0.1

Test Spillet, det var bedre!

La oss få han til å peke i riktig retning
Gå til Cudedude skriptet
Legg til en linje i _process funksjonen:

	face_forward()
	
Lag en ny funksjon:

func face_forward():
	if not motion.x == 0 or not motion.z == 0:
		look_at(Vector3(-motion.x, 0, -motion.z), UP)

Test spillet

Når han går diagonalt så går han fortere
La oss fikse det,
gå til move funksjonen
endre den siste linja til:

move_and_slide((motion.normalized() * speed), UP)

endre de 4 linjene som bruker speed
bytt ut speed med tallet 1
motion.z = -speed	->	motion.z = -1
motion.z = speed	->	motion.z = 1
motion.x = -speed	->	motion.x = -1
motion.x = speed	->	motion.x = 1

gå til face_forward funksjonen og endre linja:
look_at(Vector3(-motion.x, 0, -motion.z), UP)
til:
look_at(Vector3(-motion.x, 0, -motion.z)*speed, UP)

Test Spillet
	Det var bedre!

La oss gjøre ballen lettere:
Gå til Ball scenen
Klikk "rot noden" i hierarkiet
I Inspektøren, under RigidBody, endre
Mass til 0.5
Bounce til 0.5

Test Spillet
	juster Mass og Bounce til du er fornøyd

La oss legge til en ny spiller
Gå til Game scenen
Marker Player1 i scenen
Ctrl-D for å lage en kopi

Marker Player2,
Flytt Player2 på høyre side av midtstreken
Velg Transform, Rotation
Sett Y: 90

Marker Player1,
Flytt Player1 litt til venstre
Høyreklikk, velg "Editable Children"
Velg "Cube Dube" i hierarkiet under Player1
I FilSystem (til venstre)
gå til Models/Cubedude folderen
Dra det blå materialet til
Material 
0 <null>

Gå til Game scenen
Velg Player2 i hierarkiet
I Inspektøren, sett:
"Player Id" til 2

Test Spillet:
	Kan du bevege Player1 med tastene "WSAD"?
	Kan du bevege Player2 med pil-tastene?

Kult! Sett dere sammen og spill mot hverandre.

Legg inn 3D modeller rundt banen så det blir kult!
F.eks. fra kenney.nl

Start - 5.Gang (planlagt)

Siden vi glemte å gange med speed i face_forward funksjonen,
bruker spillerne for lang tid til å snu seg.

gå til face_forward funksjonen og endre linja:
look_at(Vector3(-motion.x, 0, -motion.z), UP)
til:
look_at(Vector3(-motion.x, 0, -motion.z)*speed, UP)


Jeg har lagt til kollisjons-sone på målene
og koblet et signal til Game skriptet
som sender 2 hvis det scores på Goal1
og sender 1 hvis det scores på Goal2

Jeg har også lagt til en Timer på Game scenen
med 2 sekunders ventetid (OneShot=true)

La oss få spillerne til å "fryse"
i 2 sekunder når noen scorer

Gå til Player skriptet
Lag en variabel på linje 4:

var can_move = true

endre _physics_process funksjonen
så den gjør move() bare hvis can_move er sant

if can_move:
	move()
	animate()			// Flyttet fra _process

lag en ny funksjon:

func can_move(value):
	can_move = value

Gå til Game skriptet
gå til _on_GoalDetection_body_entered():
legg til i funksjonen:

	get_tree().call_group("player", "can_move", false)
	$Timer.start()

Gå Til Game scenen
Velg Rotnoden (Game)
+ node, fjern søketeksten, velg Node
Rename "Node" til "StartPositions"
+ node, skriv "pos", Velg Position3D
Rename til "BallSpawn",
Flytt den litt over banen
Ctrl-D for å lage en kopi
Rename den til "Player1Spawn"
Flytt den litt til venstre
Ctrl-D for å lage en kopi
Rename den til "Player2Spawn"
Flytt den litt til høyre

Gå til skriptet

I _on_Timer_timeout():
Bytt ut "pass" med "reset_pitch()"

I _ready():
Bytt ut "pass" med "reset_pitch()"

La oss lage denne funksjonen:

func reset_pitch():
	var BallSpawn = get_tree().get_root().find_node("BallSpawn", true, false)
	Ball.translation = BallSpawn.translation
	Ball.axis_lock_linear_x = false
	Ball.axis_lock_linear_y = false
	Ball.axis_lock_linear_z = false
	get_tree().call_group("player", "reset")

Gå til Player skriptet
Lag en ny funksjon over move funksjonen:

func reset():
	var my_spawn = get_tree().get_root().find_node("Player%sSpawn" % player_id, true, false)
	translation = my_spawn.translation
	can_move(true)

Test Spillet:
	Starter spillerne midt på banen?
	Starter de på nytt etter scoring?

HIT - 5.Gang

La oss holde orden på scoringer
Gå til Game skriptet

Lag 3 variabler fra linje 4:

var Player1_score = 0
var Player2_score = 0
export var maximum_score = 2

Legg til i _on_GoalDetection_body_entered
før du starter Timer:
	update_score(player_id)

Lag en ny funksjon:

func update_score(player):
	var new_score
	if player == 1:
		Player1_score += 1
		new_score = Player1_score
	else:
		Player2_score += 1
		new_score = Player2_score
	
	$GUI.update_score(player, new_score)
	check_game_over(new_score)

func check_game_over(score):
	pass

Gå til GUI scenen,
Gå til skriptet
Lag en ny funksjon:

func update_score(player, score):
	var score_label = get_node("Banner/HBoxContainer/Player%sScore" % player)
	score_label.text = str(score)

Test Spillet:
	Får du oppdatert score?

Gå til Game skriptet
Forandre check_game_over funksjonen til:

func check_game_over(score):
	if score == maximum_score:
		$Timer.queue_free()
		$GUI.game_over()

Lag en ny funksjon:

func restart_game():
	get_tree().reload_current_scene()

Gå til GUI skriptet
Lag en ny funksjon:

func game_over():
	$Popup.popup_centered()

forandre _on_Button_pressed funksjonen til:

func _on_Button_pressed():
	get_parent().restart_game()

Test Spillet:
	Får du Game Over etter 2 Mål?
	Kan du starte spillet pånytt?
	Endre maximum_score for å få lengre spill

Gratulerer!
	Nå kan du dekorere med 3D modeller
	